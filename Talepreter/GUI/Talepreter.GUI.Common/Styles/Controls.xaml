<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Talepreter.GUI.Common.Controls"
                    xmlns:common="clr-namespace:Talepreter.GUI.Common">

    <common:Bool2VisibilityConverter x:Key="Bool2VisConverter"  Invisible="Collapsed"/>
    <common:AreEqualConverter x:Key="AreEqualConv" />

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}"/>
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                        <Grid>
                            <Rectangle x:Name="background" Fill="{TemplateBinding Background}"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" Name="_contentPresenter" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"></Setter>
                            <Setter Property="FontStyle" Value="Italic"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ControlFocusBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ControlFocusBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Outer" BorderThickness="2" BorderBrush="Transparent" CornerRadius="3">
                        <BulletDecorator Background="{TemplateBinding Background}">
                            <BulletDecorator.Bullet>
                                <Grid Name="grid" Width="16" Height="16">
                                    <Border Name="Border" BorderThickness="2" CornerRadius="3" BorderBrush="Transparent" />
                                    <Viewbox>
                                        <Path Name="PART_CheckArea" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" Width="10" Height="8" Data="F0 M 137.46721,176.73256 L 171.5,213.5 215.5,151.5 " StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="3" Stroke="{DynamicResource ControlFocusBrush}" />
                                    </Viewbox>
                                    <Rectangle Name="_indeterminateRectangle" Visibility="Collapsed" Margin="4" RadiusX="2" RadiusY="2" Fill="{DynamicResource ControlFocusBrush}" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <Grid>
                                <ContentPresenter Name="PART_CaptionArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" RecognizesAccessKey="True" />
                            </Grid>
                        </BulletDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="PART_CheckArea" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Outer" Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="common:AttachedProperties.DisableFocusBorder" Value="False"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ControlFocusBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="OuterBorder" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                        <ScrollViewer Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}">
                            <ScrollViewer.Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid Name="OuterGrid">
                                                    <Border Name="RoundingHelperBorder" CornerRadius="0" Background="{Binding RelativeSource={RelativeSource FindAncestor , AncestorType={x:Type TextBox}}, Path=Background}" />
                                                    <Grid Name="InnerGrid" Margin="1">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*" />
                                                            <ColumnDefinition Width="Auto" />
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <ScrollContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Name="PART_TextArea" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
                                                    </Grid>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ScrollViewer.Style>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="true"/>
                                <Condition Property="IsReadOnly" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ControlFocusBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsReadOnly" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ControlFocusBrush}" />
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsReadOnly" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ControlReadonlyTextBrush}" />
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="Foreground" Value="{DynamicResource ControlReadonlyTextBrush}"/>
                            <Setter TargetName="OuterBorder" Value="Transparent" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="ContentTemplate" Value="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Path=ItemTemplate}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="_border" Margin="{TemplateBinding Padding}" Focusable="False" ToolTipService.ToolTip="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}},Path=Content}" ToolTipService.IsEnabled="False" Background="{TemplateBinding Background}">
                        <Grid>
                            <Separator x:Name="Separator" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="1.5" IsEnabled="False" Visibility="Hidden" />
                            <AccessText x:Name="ItemContentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Hidden" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Text="{TemplateBinding Content }">
                            </AccessText>
                            <ContentPresenter Focusable="False" x:Name="ItemContentPresenter2" VerticalAlignment="Center" Margin="2, 1">
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="_border" Value="{DynamicResource ControlFocusBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextCaretBrush}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <DockPanel Background="{TemplateBinding Background}" LastChildFill="False" SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" DockPanel.Dock="Right" Width="17" Margin="0">
                            <controls:Arrow Direction="Down" Width="16" Height="16" ArrowBrush="{TemplateBinding BorderBrush}" IsTriangle="True">
                                <controls:Arrow.Template>
                                    <ControlTemplate TargetType="{x:Type controls:Arrow}">
                                        <Grid Grid.Row="0" Width="10" Height="10">
                                            <Grid.Resources>
                                                <Style TargetType="{x:Type Line}" >
                                                    <Setter Property="StrokeThickness" Value="3"/>
                                                    <Setter Property="IsHitTestVisible" Value="False"/>
                                                    <Setter Property="Stretch" Value="Uniform"/>
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </Style>
                                            </Grid.Resources>
                                            <!-- these are for right direction -->
                                            <Path Fill="{TemplateBinding ArrowBrush}" Name="_triangle" Data="M 4 2 L 8 5 L 4 8 Z" StrokeThickness="2" Stretch="Uniform" Visibility="Collapsed"/>
                                            <Path Stroke="{TemplateBinding ArrowBrush}" Name="_arrow" Data="M 4 2 L 8 5 M 4 8 L 8 5" StrokeThickness="2" Stretch="Uniform" Visibility="Visible"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="controls:Arrow.IsTriangle" Value="True">
                                                <Setter Property="Visibility" TargetName="_triangle" Value="Visible"/>
                                                <Setter Property="Visibility" TargetName="_arrow" Value="Collapsed"/>
                                            </Trigger>
                                            <Trigger Property="controls:Arrow.Direction" Value="Left">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 6 2 L 2 5 M 6 8 L 2 5"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 6 2 L 2 5 L 6 8 Z"/>
                                            </Trigger>
                                            <Trigger Property="controls:Arrow.Direction" Value="Up">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 2 6 L 5 2 M 8 6 L 5 2"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 2 6 L 5 2 L 8 6 Z"/>
                                            </Trigger>
                                            <Trigger Property="controls:Arrow.Direction" Value="Down">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 2 4 L 5 8 M 8 4 L 5 8"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 2 4 L 5 8 L 8 4 Z"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </controls:Arrow.Template>
                            </controls:Arrow>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5, 0, 1, 0" />
        <Setter Property="Height" Value="32" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="Outer" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                        <Grid>
                            <Border BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
                            <Grid>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" MaxHeight="270" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom"  
                                    MinWidth="350"  HorizontalAlignment="Stretch">
                                    <Grid>
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource ControlFocusBrush}" BorderThickness="2" Margin="0" CornerRadius="0" Background="{TemplateBinding Background}"  />
                                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="1" Style="{DynamicResource ScrollViewerStyle}" Background="{TemplateBinding Background}">
                                            <VirtualizingStackPanel Margin="3" Background="{x:Null}" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsItemsHost="True" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                                <DockPanel>
                                    <FrameworkElement DockPanel.Dock="Right" Width="17" />
                                    <ContentPresenter Name="_contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                                </DockPanel>
                                <ToggleButton x:Name="_toggleButton" ClickMode="Press" Focusable="False" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" SnapsToDevicePixels="True" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="0" MinHeight="0" Width="Auto" Style="{DynamicResource ComboBoxToggleButtonStyle}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}" TargetName="Outer"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}" TargetName="Outer"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}" TargetName="_toggleButton"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="_toggleButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_Popup" Property="IsEnabled" Value="False" />
                            <Setter Property="common:AttachedProperties.SetReadOnly" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter Property="common:AttachedProperties.SetReadOnly" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SeparatorLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="28"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10, 0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource ControlFocusBrush}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Margin="0,3,0,0" Orientation="Horizontal" Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}, Path=(common:AttachedProperties.ShowTabHeaders), Converter={StaticResource Bool2VisConverter}}">
                        <Label x:Name="PART_Header" MinHeight="25" FontFamily="Consolas" Foreground="{StaticResource ControlTextBrush}" Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabItem}}, Path=Header}" 
                            Cursor="Hand" VerticalAlignment="Center" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" MinWidth="120" MaxWidth="240" Padding="0" Margin="10,0"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabItem}}, Path=IsSelected}" Value="True">
                            <Setter TargetName="PART_Header" Property="Foreground" Value="{StaticResource ControlFocusBrush}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderThickness="2" CornerRadius="3" BorderBrush="Transparent" Margin="0,3,5,6"
                        HorizontalAlignment="Center">
                        <ContentPresenter ContentSource="Header" Margin="0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource ControlFocusBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{StaticResource ControlFocusBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="common:AttachedProperties.ShowTabHeaders" Value="false" />
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2" KeyboardNavigation.DirectionalNavigation="Contained">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Panel.ZIndex="1" Margin="0" IsItemsHost="True" Background="{TemplateBinding Background}" Visibility="{TemplateBinding common:AttachedProperties.ShowTabHeaders, Converter={StaticResource Bool2VisConverter}}"/>
                        <ContentPresenter Content="{TemplateBinding SelectedContent}" Grid.Row="1" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Name="PART_SelectedContentHost"
                            Margin="0,6" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OperationStatusStyle" TargetType="{x:Type Ellipse}">
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Fill" Value="Transparent"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Stroke" Value="{DynamicResource ControlBorderBrush}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="True">
                <Setter Property="Stroke" Value="Green" />
                <Setter Property="Fill" Value="Green" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="False">
                <Setter Property="Stroke" Value="Red" />
                <Setter Property="Fill" Value="Red" />
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type RepeatButton}" x:Key="ScrollBarThumbStyle">
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="FrameworkElement.Width" Value="16" />
        <Setter Property="FrameworkElement.Height" Value="16" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Padding="2" Background="Transparent" Width="16" Height="16">
                        <Path Fill="Transparent" Stroke="{StaticResource ControlFocusBrush}" Name="ExpandPath" >
                            <Path.Data>
                                <PathGeometry Figures="M0,0L6,6L6,-6z" />
                            </Path.Data>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="{StaticResource ControlFocusBrush}" />
                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="{StaticResource ControlFocusBrush}" />
                        </Trigger>
                        <Trigger Property="RepeatButton.IsEnabled" Value="False">
                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="{StaticResource ControlBorderBrush}" />
                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}" x:Key="VerticalScrollbarStyle">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="10"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{StaticResource ControlBackgroundBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="0.0001*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="UpBtn" Grid.Row="0" Style="{StaticResource ScrollBarThumbStyle}" Command="{x:Static ScrollBar.LineUpCommand}">
                            <RepeatButton.RenderTransform>
                                <RotateTransform Angle="90" CenterX="4" CenterY="4" />
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                        <RepeatButton x:Name="BottomBtn" Grid.Row="2" Style="{StaticResource ScrollBarThumbStyle}" Command="{x:Static ScrollBar.LineDownCommand}">
                            <RepeatButton.RenderTransform>
                                <RotateTransform Angle="270" CenterX="7" CenterY="4" />
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                        <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Margin="-2,-4,3,2" >
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Rectangle x:Name="Rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource ControlFocusBrush}" SnapsToDevicePixels="True"/>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource AreEqualConv}">
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource AncestorType=ScrollViewer}"/>
                                    <Binding Path="ScrollableHeight" RelativeSource="{RelativeSource AncestorType=ScrollViewer}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="BottomBtn" Property="RepeatButton.IsEnabled" Value="False"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding VerticalOffset, RelativeSource={RelativeSource AncestorType=ScrollViewer}}" Value="0">
                            <Setter TargetName="UpBtn" Property="RepeatButton.IsEnabled" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Name="InnerGrid" Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Margin="0" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Name="PART_TextArea" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
                        <ScrollBar Grid.Column="1" Panel.ZIndex="10" SmallChange="100" LargeChange="500" HorizontalAlignment="Center" x:Name="PART_VerticalScrollBar" 
                            AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" 
                            Orientation="Vertical" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                            ViewportSize="{TemplateBinding ViewportHeight}" Width="16" Style="{StaticResource VerticalScrollbarStyle}">
                        </ScrollBar>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ExpanderToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border" BorderThickness="2" CornerRadius="100" Background="{StaticResource ControlBackgroundBrush}" Width="24" Height="24">
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="{DynamicResource ControlBorderColor}" Offset="0.0" />
                            <GradientStop Color="{DynamicResource ControlBorderColor}" Offset="1.0" />
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Border.BorderBrush>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlFocusColor1}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlFocusColor3}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlFocusColor3}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlFocusColor1}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlBorderColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ExpandededArrow">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Path x:Name="CollapsedArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 6 L 8 0 Z" Fill="{StaticResource ControlFocus2Brush}"/>
                <Path x:Name="ExpandededArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" Data="M 0 6 L 4 0 L 8 6 Z" Fill="{StaticResource ControlFocus2Brush}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="CollapsedArrow" Value="{StaticResource ControlFocusBrush}" />
                <Setter Property="Fill" TargetName="ExpandededArrow" Value="{StaticResource ControlFocusBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="CollapsedArrow" Value="{x:Null}" />
                <Setter Property="Stroke" TargetName="CollapsedArrow" Value="{StaticResource ControlBorderBrush}" />
                <Setter Property="Fill" TargetName="ExpandededArrow" Value="{x:Null}" />
                <Setter Property="Stroke" TargetName="ExpandededArrow" Value="{StaticResource ControlBorderBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderThickness="2" BorderBrush="Transparent" x:Name="Border" CornerRadius="3" Margin="5,0">
                        <BulletDecorator Background="Transparent" VerticalAlignment="Center" Margin="3,0">
                            <BulletDecorator.Bullet>
                                <Grid Width="19" Height="19">
                                    <Ellipse x:Name="CheckMark" Margin="4" Visibility="Collapsed" Stroke="{StaticResource ControlFocusBrush}" Fill="{StaticResource ControlFocusBrush}" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                        </BulletDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ControlFocusBrush}" TargetName="Border"/>
                            <Setter Property="Stroke" TargetName="CheckMark" Value="{StaticResource ControlFocus2Brush}" />
                            <Setter Property="Fill" TargetName="CheckMark" Value="{StaticResource ControlFocus2Brush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{StaticResource ControlFocus2InvertBrush}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{StaticResource ControlFocus2InvertBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>